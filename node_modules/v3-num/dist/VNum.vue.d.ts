declare const _default: import("vue").DefineComponent<
  {
    value: {
      type: import("vue").PropType<number>;
      required: true;
    };
    locale: {
      type: import("vue").PropType<string>;
      required: true;
    } & {
      default: string;
    };
    localeMatcher: {
      type: import("vue").PropType<"best fit" | "lookup">;
      required: true;
    } & {
      default: string;
    };
    currency: {
      type: import("vue").PropType<string>;
      required: true;
    } & {
      default: string;
    };
    currencyDisplay: {
      type: import("vue").PropType<"symbol" | "code" | "name">;
      required: true;
    } & {
      default: string;
    };
    numberStyle: {
      type: import("vue").PropType<"percent" | "decimal" | "currency" | "unit">;
      required: true;
    } & {
      default: string;
    };
    useGrouping: {
      type: import("vue").PropType<boolean>;
      required: true;
    } & {
      default: boolean;
    };
    minimumIntegerDigits: {
      type: import("vue").PropType<string | number>;
    };
    minimumFractionDigits: {
      type: import("vue").PropType<string | number>;
    };
    maximumFractionDigits: {
      type: import("vue").PropType<string | number>;
    };
    minimumSignificantDigits: {
      type: import("vue").PropType<string | number>;
    };
    maximumSignificantDigits: {
      type: import("vue").PropType<string | number>;
    };
    notation: {
      type: import("vue").PropType<
        "standard" | "compact" | "scientific" | "engineering"
      >;
      required: true;
    } & {
      default: string;
    };
    compactDisplay: {
      type: import("vue").PropType<"long" | "short">;
      required: true;
    } & {
      default: string;
    };
    signDisplay: {
      type: import("vue").PropType<"auto" | "always" | "never" | "exceptZero">;
      required: true;
    } & {
      default: string;
    };
    round: {
      type: import("vue").PropType<boolean>;
      required: true;
    } & {
      default: boolean;
    };
  },
  () => void,
  unknown,
  {},
  {},
  import("vue").ComponentOptionsMixin,
  import("vue").ComponentOptionsMixin,
  Record<string, any>,
  string,
  import("vue").VNodeProps &
    import("vue").AllowedComponentProps &
    import("vue").ComponentCustomProps,
  Readonly<
    {
      value?: unknown;
      locale?: unknown;
      localeMatcher?: unknown;
      currency?: unknown;
      currencyDisplay?: unknown;
      numberStyle?: unknown;
      useGrouping?: unknown;
      minimumIntegerDigits?: unknown;
      minimumFractionDigits?: unknown;
      maximumFractionDigits?: unknown;
      minimumSignificantDigits?: unknown;
      maximumSignificantDigits?: unknown;
      notation?: unknown;
      compactDisplay?: unknown;
      signDisplay?: unknown;
      round?: unknown;
    } & {
      round: boolean;
      value: number;
      currency: string;
      locale: string;
      localeMatcher: "best fit" | "lookup";
      currencyDisplay: "symbol" | "code" | "name";
      numberStyle: "percent" | "decimal" | "currency" | "unit";
      useGrouping: boolean;
      notation: "standard" | "compact" | "scientific" | "engineering";
      compactDisplay: "long" | "short";
      signDisplay: "auto" | "always" | "never" | "exceptZero";
    } & {
      minimumIntegerDigits?: string | number | undefined;
      minimumFractionDigits?: string | number | undefined;
      maximumFractionDigits?: string | number | undefined;
      minimumSignificantDigits?: string | number | undefined;
      maximumSignificantDigits?: string | number | undefined;
    }
  >,
  {
    round: boolean;
    currency: string;
    locale: string;
    localeMatcher: "best fit" | "lookup";
    currencyDisplay: "symbol" | "code" | "name";
    numberStyle: "percent" | "decimal" | "currency" | "unit";
    useGrouping: boolean;
    notation: "standard" | "compact" | "scientific" | "engineering";
    compactDisplay: "long" | "short";
    signDisplay: "auto" | "always" | "never" | "exceptZero";
  }
>;
export default _default;
