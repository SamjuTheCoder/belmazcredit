{"remainingRequest":"C:\\Users\\User\\Documents\\vue-project\\investmentFrontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\User\\Documents\\vue-project\\investmentFrontend\\src\\components\\schemeListing.vue?vue&type=style&index=0&id=2efaf482&scoped=true&lang=css&","dependencies":[{"path":"C:\\Users\\User\\Documents\\vue-project\\investmentFrontend\\src\\components\\schemeListing.vue","mtime":1643374125643},{"path":"C:\\Users\\User\\Documents\\vue-project\\investmentFrontend\\node_modules\\css-loader\\dist\\cjs.js","mtime":1643127536918},{"path":"C:\\Users\\User\\Documents\\vue-project\\investmentFrontend\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1643127554594},{"path":"C:\\Users\\User\\Documents\\vue-project\\investmentFrontend\\node_modules\\postcss-loader\\src\\index.js","mtime":1643127541279},{"path":"C:\\Users\\User\\Documents\\vue-project\\investmentFrontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1643127533100},{"path":"C:\\Users\\User\\Documents\\vue-project\\investmentFrontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1643127543662}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLnRpdGxlIHsKICAgIHRleHQtYWxpZ246IGNlbnRlcjsKfQouc2VsZWN0IHsKICAgIHdpZHRoOiAxMDAlOwogICAgYmFja2dyb3VuZDogI2ZmZjsKICAgIGJvcmRlcjogMnB4IHNvbGlkICNiY2MxYzQ7Cn0K"},{"version":3,"sources":["schemeListing.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"schemeListing.vue","sourceRoot":"src/components","sourcesContent":["<template>\n<b-container>\n    <div>\n        <div>\n            <v-data-table :headers=\"headers\" :items=\"indexSn\" class=\"elevation-1\">\n                <template v-slot:top>\n                    <v-toolbar flat>\n                        <v-toolbar-title>Scheme Listing</v-toolbar-title>\n                        <v-divider class=\"mx-4\" inset vertical></v-divider>\n                        <v-spacer></v-spacer>\n                        <v-dialog v-model=\"dialog\" max-width=\"500px\">\n                            <template v-slot:activator=\"{ on, attrs }\">\n                                <v-btn color=\"primary\" dark class=\"mb-2\" v-bind=\"attrs\" v-on=\"on\">\n                                    <v-icon small class=\"mr-2\">\n                                        mdi-plus-box-multiple-outline\n                                    </v-icon> Create a Scheme\n                                </v-btn>\n                            </template>\n                            <v-card>\n                                <div class=\"title pt-4\">\n                                    <span class=\"text-h6\">Enter the scheme name </span>\n                                </div>\n\n                                <v-card-text>\n                                    <v-container>\n                                        <v-row>\n\n                                            <v-col cols=\"12\">\n                                                <b-form-input v-model=\"editedItem.scheme_name\" placeholder=\"Scheme Name\"></b-form-input>\n\n                                            </v-col>\n                                           \n                                            <v-col cols=\"12\">\n                                               \n                                                <b-form-select v-model=\"editedItem.sponsor_name\" class=\"select p-2 \" style=\"width:100%; background:#fff;\" :options=\"options\"></b-form-select>\n                                            </v-col>\n                                            <v-col cols=\"12\">\n                                                <b-button v-b-modal.modal-multi-1 style=\"background: #20618c; color: #fff; width: 100%\" @click=\"save\" size=\"lg\">Continue</b-button>\n                                            </v-col>\n\n                                        </v-row>\n                                    </v-container>\n                                </v-card-text>\n\n                            </v-card>\n                        </v-dialog>\n                        <v-dialog v-model=\"dialogDelete\" max-width=\"500px\">\n                            <v-card>\n                                <v-card-title class=\"text-h5\">Are you sure you want to delete this item?</v-card-title>\n                                <v-card-actions>\n                                    <v-spacer></v-spacer>\n                                    <v-btn color=\"blue darken-1\" text @click=\"closeDelete\">Cancel</v-btn>\n                                    <v-btn color=\"blue darken-1\" text @click=\"deleteItemConfirm\">OK</v-btn>\n                                    <v-spacer></v-spacer>\n                                </v-card-actions>\n                            </v-card>\n                        </v-dialog>\n                    </v-toolbar>\n                </template>\n                 <template v-slot:item.setup=\"{item}\">\n                <div>\n                    <router-link  style=\"text-decoration: none;\" :to=\"`/schemeSetup/${item.id}`\">Setup</router-link>\n                </div>\n                </template>\n                 <template v-slot:item.status=\"{item }\">\n                <div>\n                    <v-btn style=\"color:red\" v-if=\"item.status == 1\" @click=\"toogleStatus(item.id)\" text >De-activate</v-btn>\n                    <v-btn style=\"color:green\" text v-else @click=\"toogleStatus(item.id)\" >Activate</v-btn>\n                </div>\n            </template>\n                <template v-slot:item.actions=\"{ item }\">\n                    <v-icon small class=\"mr-2\">\n                        mdi-dots-horizontal\n                    </v-icon>\n                </template>\n                <template v-slot:no-data>\n                    <v-btn color=\"primary\" @click=\"initialize\">\n                        Reset\n                    </v-btn>\n                </template>\n            </v-data-table>\n\n        </div>\n        <div>\n            <div>\n                <b-table striped hover :items=\"items\"></b-table>\n            </div>\n        </div>\n    </div>\n</b-container>\n</template>\n\n<script>\nimport swal from 'sweetalert2';\nexport default {\n    data: () => ({\n        dialog: false,\n        dialogDelete: false,\n        \n        options: [\n\n         ],      \n     \n        headers: [{\n                text: 'S/N',\n                align: 'start',\n                sortable: false,\n                value: 'sn',\n                class: \"blue lighten-5\"\n            },\n            {\n                text: 'Scheme Name',\n                value: 'scheme_name',\n                class: \"blue lighten-5\"\n            },\n            {\n                text: 'Sponsor',\n                value: 'sponsor_name',\n                class: \"blue lighten-5\"\n            },\n            {\n                text: 'Date Created',\n                value: 'date_created',\n                class: \"blue lighten-5\"\n            },\n            {\n                text: 'Action',\n                value: 'setup',\n                class: \"blue lighten-5\"\n            },\n\n            {\n                text: 'Status',\n                value: 'status',\n                class: \"blue lighten-5\"\n            },\n              {\n                value: 'id',\n                align: ' d-none'\n                \n            },\n            {\n                text: '',\n                value: 'edit',\n                sortable: false,\n                class: \"blue lighten-5\"\n            },\n        ],\n        sponsor_n: '',\n        desserts: [],\n        editedIndex: -1,\n        editedItem: {\n            sn: [],\n            scheme_name: '',\n            sponsor_name: null,\n            date_created: '',\n           \n            status: 'Active',\n            edit: '...',\n        },\n        defaultItem: {\n            sn: [],\n            scheme_name: '',\n            sponsor_name: '',\n            date_created: '',\n           \n            status: 'Active',\n            edit: '',\n        },\n    }),\n beforeMount(){\n    const list = this.find();\n    const findSponsor = this.findSponsor();\n  \n\n    },\n    computed: {\n        indexSn() {\n            return this.desserts.map((d, index) => ({\n                ...d,\n                sn: index + 1\n            }))\n        },\n    },\n\n    watch: {\n        dialog(val) {\n            val || this.close()\n        },\n        dialogDelete(val) {\n            val || this.closeDelete()\n        },\n    },\n\n   \n\n    methods: {\n        initialize() {\n            this.desserts = [\n            ]\n        },\n\n        close() {\n            this.dialog = false\n            this.$nextTick(() => {\n                this.editedItem = Object.assign({}, this.defaultItem)\n                this.editedIndex = -1\n            })\n        },\n\n        closeDelete() {\n            this.dialogDelete = false\n            this.$nextTick(() => {\n                this.editedItem = Object.assign({}, this.defaultItem)\n                this.editedIndex = -1\n            })\n        },\n          async toogleStatus(id){\n            try {\n                const url = \"/scheme-status\";\n                const resp = await this.$http.post(url, {\n                    id\n                })\n                console.log({id})\n                // TODO check if resp is successful\n\n                // change the status from the front\n                 if (resp.data.code == '00') {\n                    const success_message = resp.data.message;\n                      const success_status = resp.data.status;\n                    swal.fire({\n                        icon: 'success',\n                        title: success_status,\n                        text: success_message,\n                    });\n                } else {\n                    const error_message = resp.data.message;\n                    swal.fire({\n                        icon: 'Error',\n                        title: 'error',\n                        text: error_message,\n                    });\n                }\n               \n                this.desserts = this.desserts.map(d => {\n                    console.log();\n                    if (d.id == id) {\n                        return {...d, status: d.status == 1? 0: 1}\n                    }\n                    return d\n                })\n\n            } catch (error) {\n                \n            }\n        },\n        async findSponsor(){\n            const response = await this.$http.get('/list-sponsors')\n           // this.editedItem.sponsor_name =response.data.data\n            response.data.data.forEach(el => {\n       this.options.push(\n           { \n               value:el.id,                  \n   text: el.sponsor_name  \n\n\n           }\n           \n       )\n         console.log(response)    \n   });\n\n        },\n    \nasync find(){\n    try{\n   const response = await this.$http.get('/list-schemes', )\n   const sponsor_res = await this.$http.get('/list-sponsors', )\n   this.desserts = response.data.data;\n   this.sponsor_n = sponsor_res.data.data;\n   this.desserts = [];\n   //Getting the data and pushing it into the desserts array for each object in the array \n   response.data.data.forEach(el => {\n\n       sponsor_res.data.data.forEach(elx => {\n\n            if( elx.id == el.sponsor_name ) {\n\n                \n            this.desserts.push(\n                {\n                    status: el.status,\n                    id: el.id,         \n                    scheme_name: el.scheme_name,\n                    sponsor_name:  elx.sponsor_name,\n                    date_created: el.date_created,\n\n                }\n            )\n            \n            }\n\n         });\n   });\n    console.log(response);\n}catch (err) {\n                console.log(err);\n            }\n},\n       async save() {\n            if (!this.editedItem.scheme_name || !this.editedItem.sponsor_name) {\n                swal.fire('Make sure you entered all fields properly', 'error');\n                return;\n            }\n              try {\n              //  console.log(this.institution_name, this.institution_code, \"=-------------\")\n                const response = await this.$http.post('/add-scheme', {\n                   scheme_name: this.editedItem.scheme_name,\n                    sponsor_name: this.editedItem.sponsor_name,\n                });\n\n                console.log(response);\n                if (response.data.code == '00') {\n                    const success_message = response.data.message;\n                      const success_status = response.data.status;\n                    swal.fire({\n                        icon: 'success',\n                        title: success_status,\n                        text: success_message,\n                    });\n                } else {\n                    const error_message = response.data.message;\n                    swal.fire({\n                        icon: 'Error',\n                        title: 'error',\n                        text: error_message,\n                    });\n                }\n                if (this.editedIndex > -1) {\n                    Object.assign(this.desserts[this.editedIndex], this.editedItem)\n                } else {\n                    this.desserts.push(this.editedItem)\n                }\n\n                this.close()\n\n            } catch (err) {\n                console.log(err);\n            }\n           \n\n           },\n    },\n}\n</script>\n\n<style scoped>\n.title {\n    text-align: center;\n}\n.select {\n    width: 100%;\n    background: #fff;\n    border: 2px solid #bcc1c4;\n}\n</style>\n"]}]}