{"remainingRequest":"C:\\Users\\User\\Documents\\vue-project\\investmentFrontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\User\\Documents\\vue-project\\investmentFrontend\\src\\components\\Nav\\LandingPage.vue?vue&type=template&id=396be2f9&scoped=true&","dependencies":[{"path":"C:\\Users\\User\\Documents\\vue-project\\investmentFrontend\\src\\components\\Nav\\LandingPage.vue","mtime":1644909699988},{"path":"C:\\Users\\User\\Documents\\vue-project\\investmentFrontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1643127533100},{"path":"C:\\Users\\User\\Documents\\vue-project\\investmentFrontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1643127554791},{"path":"C:\\Users\\User\\Documents\\vue-project\\investmentFrontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1643127533100},{"path":"C:\\Users\\User\\Documents\\vue-project\\investmentFrontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1643127543662}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQoNCjxkaXYgY2xhc3M9Im1hLTAgcGEtMCBjb250YWluZXItZmx1aWQiPg0KIA0KICAgIDxkaXYgc3R5bGU9IiIgY2xhc3M9Im1iLTEwIG1haW5faGVhZGVyIGNvbnRhaW5lci1mbHVpZCI+DQogICAgICAgIDxkaXYgaWQ9Im5hdmJhciIgY2xhc3M9Im5hdmlnYV9iYXIgY29udGFpbmVyLWZsdWlkIj4NCiAgICAgICAgICAgIDxuYXYgOmNsYXNzPSJ7ICdvblNjcm9sbCc6ICF2aWV3LnRvcE9mUGFnZX0iIGNsYXNzPSJuYXZiYXIgZml4ZWQtdG9wIG5hdmJhci1leHBhbmQtbGciPg0KICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9IiIgY2xhc3M9ImNvbnRhaW5lci1mbHVpZCI+DQogICAgICAgICAgICAgICAgICAgIDxhIHN0eWxlPSJmb250LXNpemU6IDI1cHg7IGZvbnQtd2VpZ2h0OiA2MDA7IGNvbG9yOiB3aGl0ZTsNCiAgdGV4dC1zaGFkb3c6IDJweCAycHggNHB4ICMwMDAwMDA7IiAgY2xhc3M9Im5hdmJhci1icmFuZCIgaHJlZj0iIyI+QmVsbWF6IENyZWRpdDwvYT4NCiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0ibmF2YmFyLXRvZ2dsZXIiIHR5cGU9ImJ1dHRvbiIgZGF0YS1icy10b2dnbGU9ImNvbGxhcHNlIiBkYXRhLWJzLXRhcmdldD0iI25hdmJhclN1cHBvcnRlZENvbnRlbnQiIGFyaWEtY29udHJvbHM9Im5hdmJhclN1cHBvcnRlZENvbnRlbnQiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIiBhcmlhLWxhYmVsPSJUb2dnbGUgbmF2aWdhdGlvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibmF2YmFyLXRvZ2dsZXItaWNvbiI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sbGFwc2UgbmF2YmFyLWNvbGxhcHNlIiBpZD0ibmF2YmFyU3VwcG9ydGVkQ29udGVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdmJhci1uYXYgbWEtYXV0byBtYi0yIG1iLWxnLTAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibmF2LWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibmF2LWxpbmsgYWN0aXZlIiBhcmlhLWN1cnJlbnQ9InBhZ2UiIGhyZWY9Ii9ucG0iPkhvbWU8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9Im5hdi1saW5rIiBocmVmPSIjZmFxIj5GYXE8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9Im5hdi1saW5rIiBocmVmPSIjc2VydmljZXMiPlNlcnZpY2VzPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJuYXYtbGluayIgaHJlZj0iI2Jsb2ciPkJsb2c8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9Im5hdi1saW5rIiBocmVmPSIjYWJvdXQiPkFib3V0IFVzPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJuYXYtbGluayIgaHJlZj0iI2NvbnRhY3QiPkNvbnRhY3QgVXM8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9uYXY+DQogICAgICAgIDwvZGl2Pg0KICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPg0KICAgICAgICAgICAgPGRpdiBzdHlsZT0ibWFyZ2luLXRvcDogMTAlIj4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJiaWdfdHh0IGNvbC1sZy02Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0ibWItMyBtdC0zICI+QmVsbWF6IENyZWRpdCA8L2gyPg0KICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIDx1bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im1iLTIiPkVhc3kgd2l0aGRyYXdhbCBzeXN0ZW08L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibWItMiI+QWZmb3JkYWJsZSBsb2FuIGludGVyZXN0IHJhdGU8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibWItMiI+Qm9udXMgb24gYWxsIHJlZmVycmFsPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im1iLTIiPkNvbnRyaWJ1dGlvbiBzeXN0ZW08L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibWItMiI+QXdlc29tZSByZXR1cm4gb24gaW52ZXN0bWVudCAoUk9JKTwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0ibWFyZ2luLWJvdHRvbTogMjAlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvbG9naW4iPjxidXR0b24gY2xhc3M9ImJ1dHRvbjEiPlNpZ24gSW48L2J1dHRvbj48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3JlZ2lzdGVyIj48YnV0dG9uIGNsYXNzPSJidXR0b24yIj5TaWduIFVwPC9idXR0b24+PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNiI+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9ImltYWdlX29uZSIgc3JjPSIuLi8uLi9hc3NldHMvZmlyc3Rzdmcuc3ZnIiBhbHQ9IiIgc3Jjc2V0PSIiIHN0eWxlPSJtYXJnaW4tbGVmdDotMTUwcHg7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICA8L2Rpdj4NCiAgICA8ZGl2IGNsYXNzPSJtdC0xNiBjb250YWluZXIiPg0KICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVhdF90eHQgY29sLWxnLTYiPg0KICAgICAgICAgICAgICAgIDxoMiBpZD0iYWJvdXQiPkFib3V0IFVzPC9oMj4NCiAgICAgICAgICAgICAgICA8cD48L3A+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHQtOCBtYi0xMiI+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtaG92ZXIgdi1zbG90PSJ7IGhvdmVyIH0iIG9wZW4tZGVsYXk9IjIwMCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWNhcmQgOmVsZXZhdGlvbj0iaG92ZXIgPyAxNiA6IDIiIDpjbGFzcz0ieyAnb24taG92ZXInOiBob3ZlciB9IiBzdHlsZT0idGV4dC1hbGlnbjogY2VudGVyIiBjbGFzcz0icHktNiBweC00IG14LWF1dG8gZWxldmF0aW9uLTQgZmlyc3RDYXJkIiBtYXgtd2lkdGg9IjEwMCUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9ImNvbG9yOiAjRTAyRDUwIj48aSBjbGFzcz0iZmFzIGZhLTJ4IGZhLWNsb2NrIj48L2k+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgyIGNsYXNzPSJweS0zIj5SZWZlcnJhbCBib251czwvaDI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1jYXJkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1ob3Zlcj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWhvdmVyIHYtc2xvdD0ieyBob3ZlciB9IiBvcGVuLWRlbGF5PSIyMDAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1jYXJkIDplbGV2YXRpb249ImhvdmVyID8gMTYgOiAyIiA6Y2xhc3M9InsgJ29uLWhvdmVyJzogaG92ZXIgfSIgc3R5bGU9InRleHQtYWxpZ246IGNlbnRlciIgY2xhc3M9InB5LTYgcHgtNCBteC1hdXRvIGVsZXZhdGlvbi00IGZpcnN0Q2FyZCIgbWF4LXdpZHRoPSIxMDAlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHN0eWxlPSJjb2xvcjogI0UwMkQ1MCI+PGkgY2xhc3M9ImZhcyBmYS0yeCBmYS1maWxlLWludm9pY2UiPjwvaT48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDIgY2xhc3M9InB5LTMiPkxvYW48L2gyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtY2FyZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtaG92ZXI+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy00Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1ob3ZlciB2LXNsb3Q9InsgaG92ZXIgfSIgb3Blbi1kZWxheT0iMjAwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtY2FyZCA6ZWxldmF0aW9uPSJob3ZlciA/IDE2IDogMiIgOmNsYXNzPSJ7ICdvbi1ob3Zlcic6IGhvdmVyIH0iIHN0eWxlPSJ0ZXh0LWFsaWduOiBjZW50ZXIiIGNsYXNzPSJweS02IHB4LTQgbXgtYXV0byBlbGV2YXRpb24tNCBmaXJzdENhcmQiIG1heC13aWR0aD0iMTAwJSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZT0iY29sb3I6ICNFMDJENTAiPjxpIGNsYXNzPSJmYXMgZmEtMnggZmEtYm94Ij48L2k+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgyIGNsYXNzPSJweS0zIj5Db250cmlidXRpb248L2gyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtY2FyZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtaG92ZXI+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy00Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1ob3ZlciB2LXNsb3Q9InsgaG92ZXIgfSIgb3Blbi1kZWxheT0iMjAwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtY2FyZCA6ZWxldmF0aW9uPSJob3ZlciA/IDE2IDogMiIgOmNsYXNzPSJ7ICdvbi1ob3Zlcic6IGhvdmVyIH0iIHN0eWxlPSJ0ZXh0LWFsaWduOiBjZW50ZXIiIGNsYXNzPSJweS02IHB4LTQgbXgtYXV0byBlbGV2YXRpb24tNCBmaXJzdENhcmQiIG1heC13aWR0aD0iMTAwJSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZT0iY29sb3I6ICNFMDJENTAiPjxpIGNsYXNzPSJmYXMgZmEtMnggZmEtYm94Ij48L2k+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgyIGNsYXNzPSJweS0zIj5JbnZlc3RtZW50PC9oMj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNhcmQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWhvdmVyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTYiPg0KICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9InBhZGRpbmctbGVmdDogMjAlIj4NCiAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii4uLy4uL2Fzc2V0cy9zZWNvbmQuc3ZnIiBhbHQ9IiIgc3Jjc2V0PSIiID4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICA8L2Rpdj4NCiAgICA8ZGl2IHN0eWxlPSJiYWNrZ3JvdW5kOiAjRjhGOUZBOyBtYXJnaW4tdG9wOi05MHB4OyIgY2xhc3M9ImNvbnRhaW5lci1mbHVpZCI+DQogICAgICAgIDxkaXYgY2xhc3M9InB0LTEwIGNvbnRhaW5lciI+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJzZXJ2aWNlcyI+DQogICAgICAgICAgICAgICAgPGgyIGlkPSJzZXJ2aWNlcyI+T3VyIFNlcnZpY2VzPC9oMj4NCiAgICAgICAgICAgICAgICA8cD5DaGVjayBvdXQgb3VyIGZhbnRhc3RpYyBzZXJ2aWNlcy48L3A+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InB0LTggcGItMTAgbWwtMCBwbC0wIGNvbnRhaW5lciI+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHYtaG92ZXIgdi1zbG90PSJ7IGhvdmVyIH0iIG9wZW4tZGVsYXk9IjIwMCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtY2FyZCA6ZWxldmF0aW9uPSJob3ZlciA/IDE2IDogMiIgOmNsYXNzPSJ7ICdvbi1ob3Zlcic6IGhvdmVyIH0iIHdpZHRoPSI0MDAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1pbWcgaGVpZ2h0PSIyMDBweCIgd2lkdGg9IjEwMCUiIHNyYz0iLi4vLi4vYXNzZXRzL3NlcnZpY2U2LnN2ZyI+PC92LWltZz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtZGl2aWRlcj48L3YtZGl2aWRlcj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtY2FyZC10ZXh0IGNsYXNzPSJjYXJkLXRleHQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJmb250LXdlaWdodC1ib2xkIG1iLTIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlZmVycmFsIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oND4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJwdC01Ij5HZXQgYW1hemluZyBib251czxicj4gb24gZXZlcnkgcmVmZXJyYWwgPC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtY2FyZC10ZXh0Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1kaXZpZGVyPjwvdi1kaXZpZGVyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtY2FyZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1ob3Zlcj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy0zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx2LWhvdmVyIHYtc2xvdD0ieyBob3ZlciB9IiBvcGVuLWRlbGF5PSIyMDAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWNhcmQgOmVsZXZhdGlvbj0iaG92ZXIgPyAxNiA6IDIiIDpjbGFzcz0ieyAnb24taG92ZXInOiBob3ZlciB9IiB3aWR0aD0iNDAwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtaW1nIGhlaWdodD0iMjAwcHgiIHdpZHRoPSIxMDAlIiBzcmM9Ii4uLy4uL2Fzc2V0cy9zZXJ2aWNlVHdvLnN2ZyI+PC92LWltZz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtZGl2aWRlcj48L3YtZGl2aWRlcj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtY2FyZC10ZXh0IGNsYXNzPSJjYXJkLXRleHQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJmb250LXdlaWdodC1ib2xkIG1iLTIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIExvYW4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0icHQtNSI+R2V0IGV2ZXJ5IGxvYW4gb24gPGJyPmFmZm9yZGFibGUgcmF0ZSAoMjAlKTwvcD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNhcmQtdGV4dD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtZGl2aWRlcj48L3YtZGl2aWRlcj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNhcmQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3YtaG92ZXI+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctMyIgPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHYtaG92ZXIgdi1zbG90PSJ7IGhvdmVyIH0iIG9wZW4tZGVsYXk9IjIwMCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtY2FyZCA6ZWxldmF0aW9uPSJob3ZlciA/IDE2IDogMiIgOmNsYXNzPSJ7ICdvbi1ob3Zlcic6IGhvdmVyIH0iIHdpZHRoPSI0MDAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1pbWcgaGVpZ2h0PSIyMDBweCIgd2lkdGg9IjEwMCUiIHNyYz0iLi4vLi4vYXNzZXRzL3NlcnZpY2UzLnN2ZyI+PC92LWltZz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtZGl2aWRlcj48L3YtZGl2aWRlcj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtY2FyZC10ZXh0IGNsYXNzPSJjYXJkLXRleHQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJmb250LXdlaWdodC1ib2xkIG1iLTIiID4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJbnZlc3RtZW50DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2g0Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InB0LTUiPkdldCBmYW50YXN0aWMgaW50ZXJlc3QgcmF0ZSA8YnI+IG9uIGV2ZXJ5IGFtb3VudCBpbnZlc3RlZC48L3A+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1jYXJkLXRleHQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWRpdmlkZXI+PC92LWRpdmlkZXI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNhcmQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3YtaG92ZXI+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctMyI+DQogICAgICAgICAgICAgICAgICAgICAgICA8di1ob3ZlciB2LXNsb3Q9InsgaG92ZXIgfSIgb3Blbi1kZWxheT0iMjAwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1jYXJkIDplbGV2YXRpb249ImhvdmVyID8gMTYgOiAyIiA6Y2xhc3M9InsgJ29uLWhvdmVyJzogaG92ZXIgfSIgd2lkdGg9IjQwMCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWltZyBoZWlnaHQ9IjIwMHB4IiB3aWR0aD0iMTAwJSIgc3JjPSIuLi8uLi9hc3NldHMvc2VydmljZTQuc3ZnIj48L3YtaW1nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1kaXZpZGVyPjwvdi1kaXZpZGVyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1jYXJkLXRleHQgY2xhc3M9ImNhcmQtdGV4dCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9ImZvbnQtd2VpZ2h0LWJvbGQgbWItMiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ29udHJpYnV0aW9uDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2g0Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InB0LTUiPkdldCB3b25kZXJmdWwga2ljayBiYWNrIG9uPGJyPiB5b3VyIGNvbnRyaWJ1dGlvbjwvcD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNhcmQtdGV4dD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtZGl2aWRlcj48L3YtZGl2aWRlcj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNhcmQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3YtaG92ZXI+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICANCiAgICAgICAgPC9kaXY+DQogICAgPC9kaXY+DQogICAgDQoNCiAgICA8IS0tIFBMQU4gLS0+DQogICAgPCEtLSAgDQogICAgICAgIDxkaXYgY2xhc3M9InB0LTEwIGNvbnRhaW5lciI+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJzZXJ2aWNlcyI+DQogICAgICAgICAgICAgICAgPGgyPk91ciBQbGFuPC9oMj4NCiAgICAgICAgICAgICAgICA8cD5XZSBvZmZlciBpbnRlcmVzdGluZyBwbGFuIGZyb20gc3RhZ2UgMSAtIDQuPC9wPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtdC0xMCByb3ciPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy0zIj4NCiAgICAgICAgICAgICAgICAgICAgPHYtaG92ZXIgdi1zbG90PSJ7IGhvdmVyIH0iIG9wZW4tZGVsYXk9IjIwMCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8di1jYXJkIDplbGV2YXRpb249ImhvdmVyID8gMTYgOiAyIiA6Y2xhc3M9InsgJ29uLWhvdmVyJzogaG92ZXIgfSIgc3R5bGU9ImJvcmRlci1yYWRpdXM6IDEwcHgiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9IiIgY2xhc3M9InBsYW5faGVhZGVyMiBtYi0xMCBweS04Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMj5QSEFTRSAxPC9oMj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ0ZXh0LWFsaWduOiBjZW50ZXIiIGNsYXNzPSJwbGFuX3R4dCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD48c3Bhbj48c3VwPk5HTjwvc3VwPjEwLDAwMDwvc3Bhbj48L3A+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Imxpc3QtZ3JvdXAgbGlzdC1ncm91cC1mbHVzaCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibGlzdC1ncm91cC1pdGVtIHAtMSIgc3R5bGU9ImJvcmRlcjogbm9uZSI+R2V0IDEwMCwwMDA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3JlZ2lzdGVyIj48YnV0dG9uIGNsYXNzPSJwbGFuX2J0biI+Q3JlYXRlIEFjY291bnQ8L2J1dHRvbj48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3YtY2FyZD4NCiAgICAgICAgICAgICAgICAgICAgPC92LWhvdmVyPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy0zIj4NCiAgICAgICAgICAgICAgICAgICAgPHYtaG92ZXIgdi1zbG90PSJ7IGhvdmVyIH0iIG9wZW4tZGVsYXk9IjIwMCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8di1jYXJkIDplbGV2YXRpb249ImhvdmVyID8gMTYgOiAyIiA6Y2xhc3M9InsgJ29uLWhvdmVyJzogaG92ZXIgfSIgc3R5bGU9ImJvcmRlci1yYWRpdXM6IDEwcHgiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9IiIgY2xhc3M9InBsYW5faGVhZGVyMiBtYi0xMCBweS04Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMj5QSEFTRSAyPC9oMj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ0ZXh0LWFsaWduOiBjZW50ZXIiIGNsYXNzPSJwbGFuX3R4dCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD48c3Bhbj48c3VwPk5HTjwvc3VwPjUwLDAwMDwvc3Bhbj48L3A+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Imxpc3QtZ3JvdXAgbGlzdC1ncm91cC1mbHVzaCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibGlzdC1ncm91cC1pdGVtIHAtMSIgc3R5bGU9ImJvcmRlcjogbm9uZSI+R2V0IDUwMCwwMDA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9yZWdpc3RlciI+PGJ1dHRvbiBjbGFzcz0icGxhbl9idG4iPkNyZWF0ZSBBY2NvdW50PC9idXR0b24+PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNhcmQ+DQogICAgICAgICAgICAgICAgICAgIDwvdi1ob3Zlcj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctMyI+DQogICAgICAgICAgICAgICAgICAgIDx2LWhvdmVyIHYtc2xvdD0ieyBob3ZlciB9IiBvcGVuLWRlbGF5PSIyMDAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHYtY2FyZCA6ZWxldmF0aW9uPSJob3ZlciA/IDE2IDogMiIgOmNsYXNzPSJ7ICdvbi1ob3Zlcic6IGhvdmVyIH0iIHN0eWxlPSJib3JkZXItcmFkaXVzOiAxMHB4Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSIiIGNsYXNzPSJwbGFuX2hlYWRlcjIgbWItMTAgcHktOCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDI+UEhBU0UgMzwvaDI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0idGV4dC1hbGlnbjogY2VudGVyIiBjbGFzcz0icGxhbl90eHQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+PHNwYW4+PHN1cD5OR048L3N1cD4zMDAsMDAwPC9zcGFuPjwvcD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im9mZmVyLWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibGlzdC1ncm91cCBsaXN0LWdyb3VwLWZsdXNoIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJsaXN0LWdyb3VwLWl0ZW0gcC0xIiBzdHlsZT0iYm9yZGVyOiBub25lIj5HZXQgMywwMDAsMDAwPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvcmVnaXN0ZXIiPjxidXR0b24gY2xhc3M9InBsYW5fYnRuIj5DcmVhdGUgQWNjb3VudDwvYnV0dG9uPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1jYXJkPg0KICAgICAgICAgICAgICAgICAgICA8L3YtaG92ZXI+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTMiPg0KICAgICAgICAgICAgICAgICAgICA8di1ob3ZlciB2LXNsb3Q9InsgaG92ZXIgfSIgb3Blbi1kZWxheT0iMjAwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx2LWNhcmQgOmVsZXZhdGlvbj0iaG92ZXIgPyAxNiA6IDIiIDpjbGFzcz0ieyAnb24taG92ZXInOiBob3ZlciB9IiBzdHlsZT0iYm9yZGVyLXJhZGl1czogMTBweCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0iIiBjbGFzcz0icGxhbl9oZWFkZXIyIG1iLTEwIHB5LTgiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgyPlBIQVNFIDQ8L2gyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ0ZXh0LWFsaWduOiBjZW50ZXIiIGNsYXNzPSJwbGFuX3R4dCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD48c3Bhbj48c3VwPk5HTjwvc3VwPjEsNTAwLDAwMDwvc3Bhbj48L3A+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvZmZlci1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Imxpc3QtZ3JvdXAgbGlzdC1ncm91cC1mbHVzaCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibGlzdC1ncm91cC1pdGVtIHAtMSIgc3R5bGU9ImJvcmRlcjogbm9uZSI+R2V0IDE1LDAwMCwwMDA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9yZWdpc3RlciI+PGJ1dHRvbiBjbGFzcz0icGxhbl9idG4iPkNyZWF0ZSBBY2NvdW50PC9idXR0b24+PC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNhcmQ+DQogICAgICAgICAgICAgICAgICAgIDwvdi1ob3Zlcj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICA8L2Rpdj4gLS0+DQoNCiAgICA8IS0tIE5FV1MgQkxPRyAtLT4NCiAgICA8ZGl2IHN0eWxlPSJiYWNrZ3JvdW5kOiAjRjhGOUZBIiBjbGFzcz0ibXQtMTAgcGItMTAgY29udGFpbmVyLWZsdWlkIj4NCiAgICAgICAgPGRpdiBjbGFzcz0icHQtMTAgY29udGFpbmVyIj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InNlcnZpY2VzIj4NCiAgICAgICAgICAgICAgICA8aDIgaWQ9ImJsb2ciPlJlY2VudCBOZXdzIEZyb20gQmxvZzwvaDI+DQogICAgICAgICAgICAgICANCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPCEtLSAgLS0+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtdC0xMCByb3ciPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy02Ij4NCiAgICAgICAgICAgICAgICAgICAgPHYtaG92ZXIgdi1zbG90PSJ7IGhvdmVyIH0iIG9wZW4tZGVsYXk9IjIwMCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8di1jYXJkIDplbGV2YXRpb249ImhvdmVyID8gMTYgOiAyIiA6Y2xhc3M9InsgJ29uLWhvdmVyJzogaG92ZXIgfSIgc3R5bGU9ImJvcmRlci1yYWRpdXM6IDEwcHgiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJsb2dfbmV3cyIgc3R5bGU9ImRpc3BsYXk6IGZsZXgiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii4uLy4uL2Fzc2V0cy9uZXdzMS5zdmciIGFsdD0iIiBzcmNzZXQ9IiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg0PkhvdyB5b3UgY2FuIGdldCBhIGxvYW48L2g0Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1PkFMRVggTWlrZTwvaDU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5DcmVkaXQgU2NvcmUgYW5kIEhpc3RvcnkuIEFuIGFwcGxpY2FudCdzIGNyZWRpdCBzY29yZSBpcyBvbmUgb2YgdGhlIG1vc3QgaW1wb3J0YW50IGZhY3RvcnMgYSBsZW5kZXIgY29uc2lkZXJzIHdoZW4gZXZhbHVhdGluZyBhIGxvYW4gYXBwbGljYXRpb24uPC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0idGVhbV9idG4iPlJlYWQgTW9yZTwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1jYXJkPg0KICAgICAgICAgICAgICAgICAgICA8L3YtaG92ZXI+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTYiPg0KICAgICAgICAgICAgICAgICAgICA8di1ob3ZlciB2LXNsb3Q9InsgaG92ZXIgfSIgb3Blbi1kZWxheT0iMjAwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx2LWNhcmQgOmVsZXZhdGlvbj0iaG92ZXIgPyAxNiA6IDIiIDpjbGFzcz0ieyAnb24taG92ZXInOiBob3ZlciB9IiBzdHlsZT0iYm9yZGVyLXJhZGl1czogMTBweCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYmxvZ19uZXdzIiBzdHlsZT0iZGlzcGxheTogZmxleCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iLi4vLi4vYXNzZXRzL25ld3MyLnN2ZyIgYWx0PSIiIHNyY3NldD0iIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDQ+QmV0dGVyIHdheXMgdG8gaW52ZXN0PC9oND4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNT5DSElLQSBDPC9oNT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPkludmVzdGluZyBpcyB0aGUgYWN0IG9mIGJ1eWluZyBmaW5hbmNpYWwgYXNzZXRzIHdpdGggdGhlIGFpbSBvZiBncm93aW5nIHlvdXIgd2VhbHRoIGFzIGEgcmVzdWx0IG9mIHRob3NlIGFzc2V0cyBhcHByZWNpYXRpbmcgaW4gdmFsdWUsIGFsb25nIHdpdGggcGF5aW5nIGludGVyZXN0IG9yIGRpdmlkZW5kcyBpbiBzb21lIGNhc2VzPC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0idGVhbV9idG4iPlJlYWQgTW9yZTwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1jYXJkPg0KICAgICAgICAgICAgICAgICAgICA8L3YtaG92ZXI+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgPC9kaXY+DQoNCiAgICA8IS0tIEZBUVMgLS0+DQogICAgPGRpdiBjbGFzcz0ibXQtMTAgcGItMTAgY29udGFpbmVyLWZsdWlkIj4NCiAgICAgICAgPGRpdiBjbGFzcz0icHQtMTAgY29udGFpbmVyIj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InNlcnZpY2VzIj4NCiAgICAgICAgICAgICAgICA8aDIgaWQ9ImZhcSI+RmFxczwvaDI+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwhLS0gIC0tPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibXQtMTAgcm93Ij4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNiI+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFjY29yZGlvbiIgaWQ9ImFjY29yZGlvbkV4YW1wbGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHYtaG92ZXIgdi1zbG90PSJ7IGhvdmVyIH0iIG9wZW4tZGVsYXk9IjIwMCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtY2FyZCA6ZWxldmF0aW9uPSJob3ZlciA/IDE2IDogMiIgOmNsYXNzPSJ7ICdvbi1ob3Zlcic6IGhvdmVyIH0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYi04IGFjY29yZGlvbi1pdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0iYWNjb3JkaW9uLWhlYWRlciIgaWQ9ImhlYWRpbmdPbmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImFjY29yZGlvbi1idXR0b24iIHR5cGU9ImJ1dHRvbiIgZGF0YS1icy10b2dnbGU9ImNvbGxhcHNlIiBkYXRhLWJzLXRhcmdldD0iI2NvbGxhcHNlT25lIiBhcmlhLWV4cGFuZGVkPSJ0cnVlIiBhcmlhLWNvbnRyb2xzPSJjb2xsYXBzZU9uZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdoYXQgaXMgQmVsbWF6IENyZWRpdA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oMj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImNvbGxhcHNlT25lIiBjbGFzcz0iYWNjb3JkaW9uLWNvbGxhcHNlIGNvbGxhcHNlIiBhcmlhLWxhYmVsbGVkYnk9ImhlYWRpbmdPbmUiIGRhdGEtYnMtcGFyZW50PSIjYWNjb3JkaW9uRXhhbXBsZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYWNjb3JkaW9uLWJvZHkiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPlRoaXMgaXMgdGhlIGZpcnN0IGl0ZW0ncyBhY2NvcmRpb24gYm9keS48L3N0cm9uZz4gSXQgaXMgc2hvd24gYnkgZGVmYXVsdCwgdW50aWwgdGhlIGNvbGxhcHNlIHBsdWdpbiBhZGRzIHRoZSBhcHByb3ByaWF0ZSBjbGFzc2VzIHRoYXQgd2UgdXNlIHRvIHN0eWxlIGVhY2ggZWxlbWVudC4gVGhlc2UgY2xhc3NlcyBjb250cm9sIHRoZSBvdmVyYWxsIGFwcGVhcmFuY2UsIGFzIHdlbGwgYXMgdGhlIHNob3dpbmcgYW5kIGhpZGluZyB2aWEgQ1NTIHRyYW5zaXRpb25zLiBZb3UgY2FuIG1vZGlmeSBhbnkgb2YgdGhpcyB3aXRoIGN1c3RvbSBDU1Mgb3Igb3ZlcnJpZGluZyBvdXIgZGVmYXVsdCB2YXJpYWJsZXMuIEl0J3MgYWxzbyB3b3J0aCBub3RpbmcgdGhhdCBqdXN0IGFib3V0IGFueSBIVE1MIGNhbiBnbyB3aXRoaW4gdGhlIDxjb2RlPi5hY2NvcmRpb24tYm9keTwvY29kZT4sIHRob3VnaCB0aGUgdHJhbnNpdGlvbiBkb2VzIGxpbWl0IG92ZXJmbG93Lg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1jYXJkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC92LWhvdmVyPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHYtaG92ZXIgdi1zbG90PSJ7IGhvdmVyIH0iIG9wZW4tZGVsYXk9IjIwMCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtY2FyZCA6ZWxldmF0aW9uPSJob3ZlciA/IDE2IDogMiIgOmNsYXNzPSJ7ICdvbi1ob3Zlcic6IGhvdmVyIH0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYi04IGFjY29yZGlvbi1pdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0iYWNjb3JkaW9uLWhlYWRlciIgaWQ9ImhlYWRpbmdUd28iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImFjY29yZGlvbi1idXR0b24gY29sbGFwc2VkIiB0eXBlPSJidXR0b24iIGRhdGEtYnMtdG9nZ2xlPSJjb2xsYXBzZSIgZGF0YS1icy10YXJnZXQ9IiNjb2xsYXBzZVR3byIgYXJpYS1leHBhbmRlZD0iZmFsc2UiIGFyaWEtY29udHJvbHM9ImNvbGxhcHNlVHdvIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSG93IHRvIGludmVzdA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oMj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImNvbGxhcHNlVHdvIiBjbGFzcz0iYWNjb3JkaW9uLWNvbGxhcHNlIGNvbGxhcHNlIiBhcmlhLWxhYmVsbGVkYnk9ImhlYWRpbmdUd28iIGRhdGEtYnMtcGFyZW50PSIjYWNjb3JkaW9uRXhhbXBsZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYWNjb3JkaW9uLWJvZHkiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPlRoaXMgaXMgdGhlIHNlY29uZCBpdGVtJ3MgYWNjb3JkaW9uIGJvZHkuPC9zdHJvbmc+IEl0IGlzIGhpZGRlbiBieSBkZWZhdWx0LCB1bnRpbCB0aGUgY29sbGFwc2UgcGx1Z2luIGFkZHMgdGhlIGFwcHJvcHJpYXRlIGNsYXNzZXMgdGhhdCB3ZSB1c2UgdG8gc3R5bGUgZWFjaCBlbGVtZW50LiBUaGVzZSBjbGFzc2VzIGNvbnRyb2wgdGhlIG92ZXJhbGwgYXBwZWFyYW5jZSwgYXMgd2VsbCBhcyB0aGUgc2hvd2luZyBhbmQgaGlkaW5nIHZpYSBDU1MgdHJhbnNpdGlvbnMuIFlvdSBjYW4gbW9kaWZ5IGFueSBvZiB0aGlzIHdpdGggY3VzdG9tIENTUyBvciBvdmVycmlkaW5nIG91ciBkZWZhdWx0IHZhcmlhYmxlcy4gSXQncyBhbHNvIHdvcnRoIG5vdGluZyB0aGF0IGp1c3QgYWJvdXQgYW55IEhUTUwgY2FuIGdvIHdpdGhpbiB0aGUgPGNvZGU+LmFjY29yZGlvbi1ib2R5PC9jb2RlPiwgdGhvdWdoIHRoZSB0cmFuc2l0aW9uIGRvZXMgbGltaXQgb3ZlcmZsb3cuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNhcmQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3YtaG92ZXI+DQogICAgICAgICAgICAgICAgICAgICAgICA8di1ob3ZlciB2LXNsb3Q9InsgaG92ZXIgfSIgb3Blbi1kZWxheT0iMjAwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1jYXJkIDplbGV2YXRpb249ImhvdmVyID8gMTYgOiAyIiA6Y2xhc3M9InsgJ29uLWhvdmVyJzogaG92ZXIgfSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1iLTggYWNjb3JkaW9uLWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgyIGNsYXNzPSJhY2NvcmRpb24taGVhZGVyIiBpZD0iaGVhZGluZ1RocmVlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJhY2NvcmRpb24tYnV0dG9uIGNvbGxhcHNlZCIgdHlwZT0iYnV0dG9uIiBkYXRhLWJzLXRvZ2dsZT0iY29sbGFwc2UiIGRhdGEtYnMtdGFyZ2V0PSIjY29sbGFwc2VUaHJlZSIgYXJpYS1leHBhbmRlZD0iZmFsc2UiIGFyaWEtY29udHJvbHM9ImNvbGxhcHNlVGhyZWUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBIb3cgdG8gZ2V0IGEgbG9hbg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oMj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImNvbGxhcHNlVGhyZWUiIGNsYXNzPSJhY2NvcmRpb24tY29sbGFwc2UgY29sbGFwc2UiIGFyaWEtbGFiZWxsZWRieT0iaGVhZGluZ1RocmVlIiBkYXRhLWJzLXBhcmVudD0iI2FjY29yZGlvbkV4YW1wbGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFjY29yZGlvbi1ib2R5Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz5UaGlzIGlzIHRoZSB0aGlyZCBpdGVtJ3MgYWNjb3JkaW9uIGJvZHkuPC9zdHJvbmc+IEl0IGlzIGhpZGRlbiBieSBkZWZhdWx0LCB1bnRpbCB0aGUgY29sbGFwc2UgcGx1Z2luIGFkZHMgdGhlIGFwcHJvcHJpYXRlIGNsYXNzZXMgdGhhdCB3ZSB1c2UgdG8gc3R5bGUgZWFjaCBlbGVtZW50LiBUaGVzZSBjbGFzc2VzIGNvbnRyb2wgdGhlIG92ZXJhbGwgYXBwZWFyYW5jZSwgYXMgd2VsbCBhcyB0aGUgc2hvd2luZyBhbmQgaGlkaW5nIHZpYSBDU1MgdHJhbnNpdGlvbnMuIFlvdSBjYW4gbW9kaWZ5IGFueSBvZiB0aGlzIHdpdGggY3VzdG9tIENTUyBvciBvdmVycmlkaW5nIG91ciBkZWZhdWx0IHZhcmlhYmxlcy4gSXQncyBhbHNvIHdvcnRoIG5vdGluZyB0aGF0IGp1c3QgYWJvdXQgYW55IEhUTUwgY2FuIGdvIHdpdGhpbiB0aGUgPGNvZGU+LmFjY29yZGlvbi1ib2R5PC9jb2RlPiwgdGhvdWdoIHRoZSB0cmFuc2l0aW9uIGRvZXMgbGltaXQgb3ZlcmZsb3cuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNhcmQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3YtaG92ZXI+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9InRleHQtYWxpZ246IHJpZ2h0IiBjbGFzcz0iY29sLWxnLTYiPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii4uLy4uL2Fzc2V0cy9mYXEuc3ZnIiBhbHQ9IiIgc3Jjc2V0PSIiPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICA8L2Rpdj4NCg0KICAgIDwhLS0gR0VUIElOIFRPVUNIIC0tPg0KICAgIDxkaXYgc3R5bGU9ImJhY2tncm91bmQ6ICNGOEY5RkE7IG1hcmdpbi10b3A6LTEzMHB4ICFpbXBvcnRhbnQiIGNsYXNzPSJtdC0xMCBwYi0xMCBjb250YWluZXItZmx1aWQiPg0KICAgICAgICA8ZGl2IGNsYXNzPSJwdC0xMCBjb250YWluZXIiPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2VydmljZXMiPg0KICAgICAgICAgICAgICAgIDxoMiBpZD0iY29udGFjdCI+R2V0IGluIFRvdWNoIFdpdGggVXMgITwvaDI+DQogICAgICAgICAgICAgICANCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPCEtLSAgLS0+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtdC0wIHJvdyI+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTYiPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYWlsX3R4dCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJkaXNwbGF5OiBub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDY+WW91ciBNZXNzYWdlIFNlbnQgc3VjY2VmdWxseTwvaDY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMjg1QjJBIj48aSBjbGFzcz0iZmFzIGZhLXRpbWVzIj48L2k+PC9zcGFuPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibXQtMTAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybV9saXN0MSIgc3R5bGU9ImRpc3BsYXk6IGZsZXgiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQgc3R5bGU9Im1hcmdpbi1yaWdodDogMjBweCIgbGFiZWw9IiBZb3VyIE5hbWUiIHBsYWNlaG9sZGVyPSIgTmFtZSIgcHJlcGVuZC1pbm5lci1pY29uPSJtZGktYWNjb3VudCIgcm91bmRlZCBzb2xvPjwvdi10ZXh0LWZpZWxkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQgc3R5bGU9IiIgbGFiZWw9IiBFbWFpbCBBZGRyZXNzIiBwbGFjZWhvbGRlcj0iIEVtYWlsIiBwcmVwZW5kLWlubmVyLWljb249Im1kaS1lbWFpbCIgcm91bmRlZCBzb2xvPjwvdi10ZXh0LWZpZWxkPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQgc3R5bGU9IiIgbGFiZWw9IiBZb3VyIFN1YmplY3QgaGVyZSIgcGxhY2Vob2xkZXI9IiBFbWFpbCIgcHJlcGVuZC1pbm5lci1pY29uPSJtZGktcGVuY2lsIiByb3VuZGVkIHNvbG8+PC92LXRleHQtZmllbGQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtdGV4dGFyZWEgc29sbyBuYW1lPSJpbnB1dC03LTQiIHJvdW5kZWQgcHJlcGVuZC1pbm5lci1pY29uPSJtZGktcGVuY2lsIiBsYWJlbD0iWW91ciBNZXNzYWdlIGhlcmUiPjwvdi10ZXh0YXJlYT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJtc2dfYnRuIj5TZW5kIE1lc3NhZ2U8L2J1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ0ZXh0LWFsaWduOiByaWdodCIgY2xhc3M9ImNvbC1sZy02Ij4NCiAgICAgICAgICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIuLi8uLi9hc3NldHMvY29udGFjdDIuc3ZnIiBhbHQ9IiIgc3Jjc2V0PSIiPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICA8L2Rpdj4NCg0KICAgIDwhLS0gZm9vdGVyIC0tPg0KICAgIDxkaXYgY2xhc3M9Im10LTEwIHBiLTEwIGNvbnRhaW5lci1mbHVpZCIgc3R5bGU9Im1hcmdpbi10b3A6LTkwcHgiPg0KICAgICAgICA8ZGl2IGNsYXNzPSJwdC0xMCBjb250YWluZXIiPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibXQtMTAgcm93Ij4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctMyI+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im90aGVyX3BhZ2VzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxoND5CZWxtYXogQ3JlZGl0PC9oND4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxwPkJlbG1heiBDcmVkaXQgaXMgYSBmaW5hY2lhbCBlbXBvd2VybWVudCBpbnZlc3RtZW50IGZpcm0gaW4gY29sbGFib3JhdGlvbiB3aXRoIE11bHRpcHVycG9zZSBDb29wb3JhdGl2ZSBTb2NpZXR5IExpbWl0ZWQgLjwvcD4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTMiPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvdGhlcl9wYWdlcyI+DQogICAgICAgICAgICAgICAgICAgICAgICA8IS0tIDxoNCBjbGFzcz0ibWwtNiI+T3RoZXIgUGFnZXM8L2g0Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPHVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIjIj5NYXJrZXRpbmc8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iIyI+Q2FtcGFpZ248L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iIyI+RGlnaXRhbCBBZ2VuY3k8L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+IC0tPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctMyI+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im90aGVyX3BhZ2VzMiI+DQogICAgICAgICAgICAgICAgICAgICAgICA8IS0tIDxoNCBjbGFzcz0ibWwtNCI+PC9oND4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx1bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWFya2V0aW5nPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Q2FtcGFpZ248L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EaWdpdGFsIEFnZW5jeTwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3VsPiAtLT4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTMiPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJvdGhlcl9wYWdlcyI+DQogICAgICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9Im1sLTQiPkNvbnRhY3QgSW5mbzwvaDQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8dWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxzcGFuIHN0eWxlPSJtYXJnaW4tcmlnaHQ6IDEwcHg7IGNvbG9yOiAjRkM4MDA5Ij48aSBjbGFzcz0iZmFzIGZhLW1hcC1tYXJrZXItYWx0Ij48L2k+PC9zcGFuPkVudWd1LCBOaWdlcmlhPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PHNwYW4gc3R5bGU9Im1hcmdpbi1yaWdodDogMTBweDsgY29sb3I6ICNGQzgwMDkiPjxpIGNsYXNzPSJmYXMgZmEtZW52ZWxvcGUiPjwvaT48L3NwYW4+aW5mb0BiZWxtYXouY29tPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIDxsaT48c3BhbiBzdHlsZT0ibWFyZ2luLXJpZ2h0OiAxMHB4OyBjb2xvcjogI0ZDODAwOSI+PGkgY2xhc3M9ImZhcyBmYS1waG9uZS1hbHQiPjwvaT48L3NwYW4+KyAyMzQgODA2IDk0NCA5MTM3PC9saT4gLS0+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibXQtOCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyIgY2xhc3M9InR3ZWV0X2ljb24yIG1yLTYiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj48aSBjbGFzcz0iZmFiIGZhLWZhY2Vib29rLWYiPjwvaT48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiIGNsYXNzPSJ0d2VldF9pY29uIG1yLTYiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj48aSBjbGFzcz0iZmFiIGZhLXR3aXR0ZXIiPjwvaT48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiIGNsYXNzPSJ0d2VldF9pY29uMyBtci02Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+PGkgY2xhc3M9ImZhYiBmYS1nb29nbGUiPjwvaT48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvZGl2Pg0KPC9kaXY+DQo="},null]}