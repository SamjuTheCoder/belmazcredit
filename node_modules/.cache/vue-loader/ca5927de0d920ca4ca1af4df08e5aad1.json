{"remainingRequest":"C:\\Users\\User\\Documents\\vue-project\\investmentFrontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\User\\Documents\\vue-project\\investmentFrontend\\src\\components\\Nav\\LandingPage.vue?vue&type=template&id=4ca4328f&scoped=true&","dependencies":[{"path":"C:\\Users\\User\\Documents\\vue-project\\investmentFrontend\\src\\components\\Nav\\LandingPage.vue","mtime":1644939166303},{"path":"C:\\Users\\User\\Documents\\vue-project\\investmentFrontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1643127533100},{"path":"C:\\Users\\User\\Documents\\vue-project\\investmentFrontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1643127554791},{"path":"C:\\Users\\User\\Documents\\vue-project\\investmentFrontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1643127533100},{"path":"C:\\Users\\User\\Documents\\vue-project\\investmentFrontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1643127543662}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}