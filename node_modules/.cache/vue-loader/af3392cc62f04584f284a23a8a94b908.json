{"remainingRequest":"C:\\Users\\User\\Documents\\vue-project\\investmentFrontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\User\\Documents\\vue-project\\investmentFrontend\\src\\components\\institution.vue?vue&type=style&index=0&id=b81902fc&scoped=true&lang=css&","dependencies":[{"path":"C:\\Users\\User\\Documents\\vue-project\\investmentFrontend\\src\\components\\institution.vue","mtime":1643633906965},{"path":"C:\\Users\\User\\Documents\\vue-project\\investmentFrontend\\node_modules\\css-loader\\dist\\cjs.js","mtime":1643127536918},{"path":"C:\\Users\\User\\Documents\\vue-project\\investmentFrontend\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1643127554594},{"path":"C:\\Users\\User\\Documents\\vue-project\\investmentFrontend\\node_modules\\postcss-loader\\src\\index.js","mtime":1643127541279},{"path":"C:\\Users\\User\\Documents\\vue-project\\investmentFrontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1643127533100},{"path":"C:\\Users\\User\\Documents\\vue-project\\investmentFrontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1643127543662}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLnRpdGxlIHsKICAgIHRleHQtYWxpZ246IGNlbnRlcjsKCn0KCgoKLyogdGJvZHkgdHI6bnRoLW9mLXR5cGUob2RkKSB7CiAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgLjA1KTsKIH0gKi8KLnRoZW1lLS1saWdodC52LWRhdGEtdGFibGUgdGJvZHkgdHI6bnRoLW9mLXR5cGUob2RkKSB7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIC4wMyk7Cn0K"},{"version":3,"sources":["institution.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8WA;AACA;;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA","file":"institution.vue","sourceRoot":"src/components","sourcesContent":["<template>\n<b-container>\n\n    <div>\n        <v-data-table :headers=\"headers\" :items=\"indexSn\" class=\"elevation-1\">\n            <template v-slot:top>\n                <v-toolbar flat>\n                    <v-toolbar-title>Institution Listing</v-toolbar-title>\n                    <v-divider class=\"mx-4\" inset vertical></v-divider>\n                    <v-spacer></v-spacer>\n                    <v-dialog v-model=\"dialog\" max-width=\"500px\">\n                        <template v-slot:activator=\"{ on, attrs }\">\n                            <v-btn color=\"primary\" dark class=\"mb-2\" v-bind=\"attrs\" v-on=\"on\">\n                                <v-icon small class=\"mr-2\">\n                                    mdi-plus-box-multiple-outline\n                                </v-icon> Create institution\n                            </v-btn>\n                        </template>\n\n                        <v-card>\n                            <div class=\"title pt-4\">\n                                <span class=\"text-h6\">{{ formTitle }}</span>\n                            </div>\n\n                            <v-card-text>\n                                <v-container>\n                                    <v-row>\n                                        <v-col cols=\"12\">\n                                            <b-form-input v-model=\"editedItem.institution_name\" placeholder=\"Institution Name\"></b-form-input>\n                                        </v-col>\n                                        <v-col cols=\"12\">\n                                            <b-form-input v-model=\"editedItem.institution_code\" placeholder=\"Institution Code\"></b-form-input>\n                                        </v-col>\n                                        <v-col cols=\"12\">\n                                            <b-button v-b-modal.modal-multi-1 style=\"background: #20618c; color: #fff; width: 100%\" @click=\"save\" size=\"lg\">Continue</b-button>\n                                        </v-col>\n\n                                    </v-row>\n                                </v-container>\n                            </v-card-text>\n\n                        </v-card>\n                    </v-dialog>\n                    <v-dialog v-model=\"dialogDelete\" max-width=\"500px\">\n                        <v-card>\n                            <v-card-title class=\"text-h5\">Are you sure you want to delete this item?</v-card-title>\n                            <v-card-actions>\n                                <v-spacer></v-spacer>\n                                <v-btn color=\"blue darken-1\" text @click=\"closeDelete\">Cancel</v-btn>\n                                <v-btn color=\"blue darken-1\" text @click=\"deleteItemConfirm\">OK</v-btn>\n                                <v-spacer></v-spacer>\n                            </v-card-actions>\n                        </v-card>\n                    </v-dialog>\n                </v-toolbar>\n            </template>\n            <template v-slot:item.edit=\"{ item }\">\n                <v-icon large class=\"mr-2\" @click=\"editItem(item)\">\n                    mdi-dots-horizontal\n                </v-icon>\n            </template>\n            <template v-slot:item.setup=\"{item}\">\n                <div>\n                    <router-link  style=\"text-decoration: none;\" :to=\"`/setupInstitution/${item.id}`\">Setup</router-link>\n                </div>\n            </template>\n            \n            <template v-slot:item.setupitem=\"{item}\">\n                <!-- <span id=\"myDIV\" class=\"active\">Active</span>\n               <span  class=\"deactive\">Deactivate</span> -->\n                <button id=\"container\" @click=\"change(item)\">Deactivate</button>\n            </template>\n\n            <template v-slot:item.status=\"{item }\">\n                <div>\n                    <v-btn style=\"color:red\" v-if=\"item.status == 1\" @click=\"toogleStatus(item.institution_code)\" text >De-activate</v-btn>\n                    <v-btn style=\"color:green\" text v-else @click=\"toogleStatus(item.institution_code)\" >Activate</v-btn>\n                </div>\n            </template>\n            <!-- <div onclick=\"myFunction()\"> </div> -->\n            <!-- <span id=\"myDIV\" class=\"active\">Active</span>\n                 -->\n            <!--    <v-btn text @click=\"submit2\">{{label}}</v-btn> -->\n\n            <template v-slot:no-data>\n                <v-btn color=\"primary\" @click=\"initialize\">\n                    Reset\n                </v-btn>\n            </template>\n        </v-data-table>\n\n    </div>\n    <div>\n        <div>\n            <!-- <b-table striped hover :items=\"items\"></b-table> -->\n        </div>\n    </div>\n\n</b-container>\n</template>\n\n<script>\nimport swal from 'sweetalert2';\n//import axios from 'axios';\n\n\nexport default {\n    data: () => ({\n        dialog: false,\n        dialogDelete: false,\n         tabIndex: 0,\n        // label: 'Active',\n        headers: [{\n                text: 'S/N',\n                align: 'start',\n                value: 'sn',\n                class: \"blue lighten-5\"\n\n            },\n            {\n                text: 'Institution Name',\n                value: 'institution_name',\n                class: \"blue lighten-5\"\n            },\n            {\n                text: 'Institution Code',\n                value: 'institution_code',\n                class: \"blue lighten-5\"\n            },\n            {\n                text: 'Actions',\n                value: 'setup',\n                class: \"blue lighten-5\"\n            },\n            {\n                text: 'Status',\n                value: 'status',\n                class: \"blue lighten-5\"\n            },\n\n            {\n                text: '',\n                value: 'edit',\n                class: \"blue lighten-5\"\n            },\n            {\n                value: 'id',\n                 align: ' d-none' \n            }\n        ],\n        desserts: [],\n        editedIndex: -1,\n        editedItem: {\n            sn: [],\n            institution_name: '',\n            institution_code: '',\n            status:''\n\n        },\n        defaultItem: {\n            sn: [],\n            institution_name: '',\n            institution_code: '',\n            status: ''\n\n        },\n    }),\n    beforeMount(){\n     this.find();\n\n    },\n\n    computed: {\n        indexSn() {\n            return this.desserts.map((d, index) => ({\n                ...d,\n                sn: index + 1\n            }))\n        },\n        formTitle() {\n            return this.editedIndex === -1 ? 'Enter the institution name and identity code' : 'Edit or Activate the institution name and identity code'\n        },\n    },\n\n    watch: {\n        dialog(val) {\n            val || this.close()\n        },\n        dialogDelete(val) {\n            val || this.closeDelete()\n        },\n    },\n\n    created() {\n        this.initialize()\n    },\n\n    methods: {\n        deleteItemConfirm(){\n            console.log(\"Here\");\n        },\n\n        initialize() {\n            this.desserts = [ ]\n        },\n\n        async toogleStatus(institution_code){\n            try {\n                const url = \"/institution-status\";\n                const resp = await this.$http.post(url, {\n                    institution_code\n                })\n                console.log({institution_code})\n                // TODO check if resp is successful\n\n                // change the status from the front\n                 if (resp.data.code == '00') {\n                    const success_message = resp.data.message;\n                      const success_status = resp.data.status;\n                    swal.fire({\n                        icon: 'success',\n                        title: success_status,\n                        text: success_message,\n                    });\n                } else {\n                    const error_message = resp.data.message;\n                    swal.fire({\n                        icon: 'Error',\n                        title: 'error',\n                        text: error_message,\n                    });\n                }\n               \n                this.desserts = this.desserts.map(d => {\n                    console.log();\n                    if (d.institution_code == institution_code) {\n                        return {...d, status: d.status == 1? 0: 1}\n                    }\n                    return d\n                })\n\n            } catch (error) {\n                \n            }\n        },\n\n        close() {\n            this.dialog = false\n            this.$nextTick(() => {\n                this.editedItem = Object.assign({}, this.defaultItem)\n                this.editedIndex = -1\n            })\n        },\n        myFunction() {\n            var x = document.getElementById(\"myDIV\");\n            if (x.innerHTML === \"Hello\") {\n                x.innerHTML = \"active\";\n            } else {\n                x.innerHTML = \"deactive\";\n            }\n        },\n\n        submit2() {\n            this.label = 'Deactivate'\n        },\n\n        closeDelete() {\n            this.dialogDelete = false\n            this.$nextTick(() => {\n                this.editedItem = Object.assign({}, this.defaultItem)\n                this.editedIndex = -1\n            })\n        },\n\n        editItem(item) {\n            this.editedIndex = this.desserts.indexOf(item)\n            this.editedItem = Object.assign({}, item)\n            this.dialog = true\n        },\n\n        change(i) {\n            console.log(i);\n            if (this.desserts.setupitem == 'Aactive') {\n                this.setupitem = 'Deactivate';\n            } else {\n                this.setupitem = 'Active'\n            }\n        },\n\nasync find(){\ntry{\n    const response = await this.$http.get('/list-institution', )\n   //this.desserts = response.data.data;\n   //Getting the data and pushing it into the desserts array for each object in the array \n   response.data.data.forEach(el => {\n       this.desserts.push(\n           {\n               status: el.status,\n               id: el.id,\n            //    status: el.status === 1 ? \"<a>Active</a>\" : \"<a> Not Active</a>\",\n               institution_code: el.institution_code,\n               institution_name: el.institution_name,\n\n           }\n       )\n   });\n    console.log(response);\n}catch (err) {\n                console.log(err);\n            }\n},\n\n\n        async save() {\n            if (this.editedItem.institution_name == '' || this.editedItem.institution_code == '') {\n                swal.fire({\n                    icon: 'warning',\n                    title: 'Error...',\n                    text: 'Check your login details and try again  ',\n                })\n\n                return;\n            }\n            try {\n              //  console.log(this.institution_name, this.institution_code, \"=-------------\")\n                const response = await this.$http.post('/create-institution', {\n                    institution_name: this.editedItem.institution_name,\n                    institution_code: this.editedItem.institution_code,\n                });\n\n                console.log(response);\n                if (response.data.code == '00') {\n                    const success_message = response.data.message;\n                      const success_status = response.data.status;\n                    swal.fire({\n                        icon: 'success',\n                        title: success_status,\n                        text: success_message,\n                    });\n                } else {\n                    const error_message = response.data.message;\n                    swal.fire({\n                        icon: 'Error',\n                        title: 'error',\n                        text: error_message,\n                    });\n                }\n                if (this.editedIndex > -1) {\n                    Object.assign(this.desserts[this.editedIndex], this.editedItem)\n                } else {\n                    this.desserts.push(this.editedItem)\n                }\n\n                this.close()\n\n            } catch (err) {\n                console.log(err);\n            }\n\n        },\n\n    },\n}\n</script>\n\n<style scoped>\n.title {\n    text-align: center;\n\n}\n\n\n\n/* tbody tr:nth-of-type(odd) {\n   background-color: rgba(0, 0, 0, .05);\n } */\n.theme--light.v-data-table tbody tr:nth-of-type(odd) {\n    background-color: rgba(0, 0, 0, .03);\n}\n</style>\n"]}]}